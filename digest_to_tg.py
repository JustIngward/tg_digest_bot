#!/usr/bin/env python3
"""IT‚ÄëDigest Telegram bot ‚Äî v4.4¬†(2025‚Äë04‚Äë21)

Patch‚ÄØv4.4¬†‚Äî¬†Regex¬†¬´–ø–æ–º—è–≥—á–µ¬ª, –±–æ–ª—å—à–µ –ø–æ–ø—ã—Ç–æ–∫
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
1. **NEWS_LINE_RE** –æ—Å–ª–∞–±–ª–µ–Ω:
   ‚Ä¢ —Ä–∞–∑—Ä–µ—à–∞–µ—Ç –æ–¥–Ω–æ–∑–Ω–∞—á–Ω—ã–π –¥–µ–Ω—å/–º–µ—Å—è—Ü `(7.4)` –∏–ª–∏ —Å¬†–Ω—É–ª—è–º–∏ `(07.04)`;
   ‚Ä¢ –¥–æ–ø—É—Å–∫–∞–µ—Ç URL c¬†–ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏/—Å–∫–æ–±–∫–∞–º–∏; –≥–ª–∞–≤–Ω–æ–µ ‚Äî –∑–∞–∫—Ä—ã–≤–∞—é—â–∞—è `)`.
2. **MAX_ITER** –ø–æ–≤—ã—à–µ–Ω –¥–æ¬†6 (–º–æ–∂–Ω–æ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å Secret‚Äë–æ–º).
3. post_filter –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –Ω–æ–≤—ã–π regex –∏ –¥–∞—ë—Ç debug‚Äëprint ¬´–æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ¬†N¬ª.
"""
import os, re, sqlite3, datetime as dt
from hashlib import md5
from urllib.parse import urlparse
import requests
from dotenv import load_dotenv
from openai import OpenAI

load_dotenv()
TZ = dt.timezone(dt.timedelta(hours=3))
COLLECTOR_MODEL = os.getenv("COLLECTOR_MODEL", "o3")
CRITIC_MODEL    = os.getenv("CRITIC_MODEL", COLLECTOR_MODEL)
MAX_AGE_HOURS   = int(os.getenv("MAX_AGE_HOURS", 168))
MIN_NEWS        = int(os.getenv("MIN_NEWS", 6))
MIN_NEWS_SOFT   = int(os.getenv("MIN_NEWS_SOFT", 3))
MAX_ITER        = int(os.getenv("MAX_ITER", 6))  # –ø–æ–≤—ã—à–µ–Ω–æ
TG_TOKEN        = os.environ["TG_TOKEN"]
CHAT_ID         = os.environ["CHAT_ID"]
ALLOWED_DOMAINS = [d.strip().lower() for d in os.getenv("ALLOWED_DOMAINS", "").split(",") if d.strip()]

NEWS_LINE_RE = re.compile(r"^\s*[-*]\s*\*\*.*?\]\(https?://[^)\s]+\)\s*\((\d{1,2})\.(\d{1,2})\)")
URL_M_RE     = re.compile(r"\((https?://[^)\s]+)\)")

client = OpenAI()

# helpers

def allowed_domain(url: str) -> bool:
    if not ALLOWED_DOMAINS:
        return True
    host = (urlparse(url).hostname or "").lower()
    return any(host == d or host.endswith("." + d) for d in ALLOWED_DOMAINS)

def count_news(text: str) -> int:
    return sum(1 for ln in text.splitlines() if NEWS_LINE_RE.match(ln))

def domains_md() -> str:
    return ", ".join(ALLOWED_DOMAINS) if ALLOWED_DOMAINS else "–ª—é–±–æ–π –∞–≤—Ç–æ—Ä–∏—Ç–µ—Ç–Ω—ã–π —Å–∞–π—Ç"

# prompts

days = MAX_AGE_HOURS // 24
PROMPT_TEMPLATE = (
    "–¢—ã¬†‚Äî IT‚Äë–∞–Ω–∞–ª–∏—Ç–∏–∫. –°—Ñ–æ—Ä–º–∏—Ä—É–π **—á–µ—Ä–Ω–æ–≤–∏–∫** –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ IT‚Äë–¥–∞–π–¥–∂–µ—Å—Ç–∞ (Markdown).\n"
    f"‚Ä¢ –ë–µ—Ä–∏ –¢–û–õ–¨–ö–û –º–∞—Ç–µ—Ä–∏–∞–ª—ã —Å –¥–æ–º–µ–Ω–æ–≤: {domains_md()}.\n"
    f"‚Ä¢ –ò—Å—Ç–æ—á–Ω–∏–∫ –º–æ–ª–æ–∂–µ {days}¬†–¥–Ω–µ–π.\n"
    "‚Ä¢ –ö–∞–∂–¥–∞—è –Ω–æ–≤–æ—Å—Ç—å –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û: `- **–ó–∞–≥–æ–ª–æ–≤–æ–∫** ‚Äî —Ç–µ–∫—Å—Ç. [–ò—Å—Ç–æ—á–Ω–∏–∫](URL) (DD.MM)`. ‚â§30¬†—Å–ª–æ–≤.\n"
    "‚Ä¢ –°–µ–∫—Ü–∏–∏: üåç¬†–ì–õ–û–ë–ê–õ–¨–ù–´–ô¬†IT, üá∑üá∫¬†–†–û–°–°–ò–ô–°–ö–ò–ô¬†TECH, üü°¬†–≠–ö–û–°–ò–°–¢–ï–ú–ê¬†1–°.\n"
    f"‚Ä¢ –ú–∏–Ω–∏–º—É–º {MIN_NEWS} –Ω–æ–≤–æ—Å—Ç–µ–π. Insight –≤ –∫–æ–Ω—Ü–µ."
)
CRITIC_SYSTEM = (
    "–ü—Ä–æ–≤–µ—Ä—å: —Å—Å—ã–ª–∫–∞+–¥–∞—Ç–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã; –¥–æ–º–µ–Ω –≤ whitelist; –¥–∞—Ç–∞ ‚â§ {days}¬†–¥–Ω–µ–π; HEAD 4xx/5xx —É–±—Ä–∞—Ç—å. –ï—Å–ª–∏ –ø–æ—Å–ª–µ –ø—Ä–∞–≤–∫–∏ < {MN} ‚Üí `RETRY`."
).format(days=days, MN=MIN_NEWS)

# core funcs

def call_collector():
    today = dt.datetime.now(TZ).strftime("%d %b %Y")
    resp = client.responses.create(
        model=COLLECTOR_MODEL,
        tools=[{"type": "web_search"}],
        input=[{"role": "user", "content": PROMPT_TEMPLATE.format(today=today)}],
        temperature=1,
        store=False,
    )
    return resp.output_text.strip()

def critic_pass(draft: str):
    return client.chat.completions.create(
        model=CRITIC_MODEL,
        temperature=1,
        messages=[{"role":"system","content":CRITIC_SYSTEM},{"role":"user","content":draft}],
    ).choices[0].message.content.strip()

def post_filter(txt: str) -> str:
    keep=[]
    for ln in txt.splitlines():
        if not NEWS_LINE_RE.match(ln):
            continue
        m=URL_M_RE.search(ln)
        if m and allowed_domain(m.group(1)):
            keep.append(ln)
    print(f"after filter: {len(keep)} lines")
    return "\n".join(keep)

def produce_digest():
    for i in range(MAX_ITER):
        draft=call_collector()
        clean=critic_pass(draft)
        if clean=="RETRY":
            continue
        filtered=post_filter(clean)
        if count_news(filtered)>=MIN_NEWS or (i==MAX_ITER-1 and count_news(filtered)>=MIN_NEWS_SOFT):
            return filtered
    raise RuntimeError("–Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–±—Ä–∞—Ç—å –¥–∞–π–¥–∂–µ—Å—Ç ‚Äî –º–∞–ª–æ —Å—Ç—Ä–æ–∫ —Å –≤–∞–ª–∏–¥–Ω–æ–π —Å—Å—ã–ª–∫–æ–π")

# send

def send(text:str):
    url=f"https://api.telegram.org/bot{TG_TOKEN}/sendMessage"
    for i in range(0,len(text),3900):
        r=requests.post(url,json={"chat_id":CHAT_ID,"text":text[i:i+3900],"parse_mode":"Markdown","disable_web_page_preview":False})
        if r.status_code!=200:
            raise RuntimeError(r.text)

if __name__=="__main__":
    sqlite3.connect("sent_hashes.db").execute("CREATE TABLE IF NOT EXISTS sent(hash TEXT PRIMARY KEY)")
    send(produce_digest())
