#!/usr/bin/env python3
"""IT‚ÄëDigest Telegram bot ‚Äî v15.2¬†(2025‚Äë04‚Äë22)

‚Ä¢ RSS‚Äëonly
‚Ä¢ –î–≤—É—Ö—ç—Ç–∞–ø–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä (title +¬†HTML)
‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 1–° (‚â•¬†2¬†–ø—É–Ω–∫—Ç–∞, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã)
‚Ä¢ HTML‚Äësafe –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram
"""
from __future__ import annotations

import os, re, json, datetime as dt, textwrap, requests, feedparser, html as _html
from urllib.parse import urlparse
from bs4 import BeautifulSoup
from dotenv import load_dotenv
from openai import OpenAI

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ CONFIG ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
load_dotenv()
TG_TOKEN = os.getenv("TG_TOKEN")
CHAT_ID = os.getenv("CHAT_ID")
OPENAI_KEY = os.getenv("OPENAI_API_KEY")
assert TG_TOKEN and CHAT_ID and OPENAI_KEY, "TG_TOKEN, CHAT_ID, OPENAI_API_KEY required"

MODEL = os.getenv("MODEL", "gpt-4o")
TZ = dt.timezone(dt.timedelta(hours=3))
MAX_DAYS = int(os.getenv("MAX_DAYS", 7))
DIGEST_NEWS_CNT = int(os.getenv("DIGEST_NEWS_CNT", 8))

client = OpenAI()

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ KEYWORDS ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
ONEC_DOMAINS = {"1c.ru", "infostart.ru", "odysseyconsgroup.com"}
ONEC_KEYS = {
    "1—Å", "1c", "1‚Äë—Å", "1-—Å", "1—Å:erp", "1—Å:–ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–µ", "wms", "–∑—É–ø",
    "—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–ª–µ–π", "—É—Ç", "—É–Ω—Ñ", "upp", "unf", "–±—É—Ö–≥–∞–ª—Ç–µ—Ä–∏—è", "odin es", "–æ–¥–∏–Ω—ç—Å"
}
TECH_INCLUDE = [
    "1—Å", "1c", "erp", "crm", "wms", "–∑—É–ø", "devops", "kubernetes", "–æ–±–ª–∞—á",
    "—Ü–∏—Ñ—Ä–æ–≤", "–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏", "–º–∏–≥—Ä–∞—Ü–∏", "–∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞", "–∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω", "ai",
]
TECH_EXCLUDE = [
    "iphone", "crypto", "–±–∏—Ç–∫–æ–∏–Ω", "ethereum", "—Å–∞–º–æ–ª–µ—Ç", "–∞–≤—Ç–æ", "—ç–ª–µ–∫—Ç—Ä–æ–º–æ–±–∏–ª",
    "—à–æ–∫–æ–ª–∞–¥", "—Ñ–∏—Å—Ç–∞—à–∫", "–±–∏—Ä–∂–∞", "lifestyle", "–∑–¥–æ—Ä–æ–≤—å–µ", "–±–∞–Ω–∫–æ–º–∞—Ç",
]

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ RSS LIST ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
RSS_FEEDS = [
    "https://habr.com/ru/rss/all/all/?fl=ru",
    "https://vc.ru/rss",
    "https://www.rbc.ru/technology/rss/full/",
    "https://tadviser.ru/index.php/–°—Ç–∞—Ç—å—è:–ù–æ–≤–æ—Å—Ç–∏?feed=rss",
    "https://novostiitkanala.ru/feed/",
    "https://www.kommersant.ru/RSS/section-tech.xml",
    "https://1c.ru/news/all.rss",
    "https://infostart.ru/rss/news/",
    "https://trends.rbc.ru/trends.rss",
    "https://rusbase.com/feed/",
]

CUTOFF = dt.datetime.utcnow() - dt.timedelta(days=MAX_DAYS)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ FETCH & FILTER ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

def _plain(html: str) -> str:
    return BeautifulSoup(html, "html.parser").get_text(" ").lower()

def _hit(text: str) -> bool:
    if any(w in text for w in TECH_EXCLUDE):
        return False
    return any(k in text for k in TECH_INCLUDE) or any(k in text for k in ONEC_KEYS)


def rss_fetch() -> list[dict]:
    out = []
    for url in RSS_FEEDS:
        try:
            feed = feedparser.parse(url)
        except Exception:
            continue
        for e in feed.entries:
            link, title = e.get("link", ""), e.get("title", "")
            date_str = (e.get("published") or e.get("updated") or e.get("dc_date") or "")[:10]
            try:
                date_obj = dt.datetime.strptime(date_str, "%Y-%m-%d")
            except Exception:
                date_obj = dt.datetime.utcnow()  # —Å—á–∏—Ç–∞–π —Å–≤–µ–∂–µ–π
            if date_obj < CUTOFF:
                continue
            out.append({
                "title": title,
                "url": link,
                "date": date_obj.strftime("%d.%m.%Y"),
                "_t": title.lower(),
            })
    return sorted(out, key=lambda a: a["date"], reverse=True)


def filter_stage(arts: list[dict]) -> list[dict]:
    first = [a for a in arts if _hit(a["_t"])]
    if len(first) >= DIGEST_NEWS_CNT:
        return first[:DIGEST_NEWS_CNT]
    for a in arts:
        if a in first:
            continue
        try:
            page = requests.get(a["url"], timeout=10).text
        except Exception:
            continue
        if _hit(_plain(page)):
            first.append(a)
        if len(first) >= DIGEST_NEWS_CNT:
            break
    return first


def is_onec(a: dict) -> bool:
    return (any(k in a["title"].lower() for k in ONEC_KEYS) or
            urlparse(a["url"]).netloc in ONEC_DOMAINS)


def select_articles(all_arts: list[dict]) -> list[dict]:
    arts = filter_stage(all_arts)
    onec = [a for a in arts if is_onec(a)]
    other = [a for a in arts if not is_onec(a)]
    sel = (onec[:2] if len(onec) >= 2 else onec) + other
    return sel[:DIGEST_NEWS_CNT]

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ GPT ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

def build_prompt(arts: list[dict]) -> str:
    today = dt.datetime.now(TZ).strftime("%d %b %Y")
    return textwrap.dedent(f"""
        –ù–∞ –≤—Ö–æ–¥–µ JSON —Å—Ç–∞—Ç–µ–π (title, url, date). –°–æ—Å—Ç–∞–≤—å –¥–∞–π–¥–∂–µ—Å—Ç HTML‚ÄëMarkdown c¬†—Ç—Ä–µ–º—è —Å–µ–∫—Ü–∏—è–º–∏:
        üåç <b>GLOBAL¬†IT</b>\nüá∑üá∫ <b>RU¬†TECH</b>\nüü° <b>1–°¬†–≠–ö–û–°–ò–°–¢–ï–ú–ê</b>
        –§–æ—Ä–º–∞—Ç: "- <b>–ó–∞–≥–æ–ª–æ–≤–æ–∫</b> ‚Äî 1‚Äë2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è. <a href=\"url\">–ò—Å—Ç–æ—á–Ω–∏–∫</a> (DD.MM.YYYY)".
        –ï—Å–ª–∏ —Å—Ç–∞—Ç–µ–π –º–µ–Ω—å—à–µ {DIGEST_NEWS_CNT}, –≤—ã–≤–æ–¥–∏ —Å—Ç–æ–ª—å–∫–æ, —Å–∫–æ–ª—å–∫–æ –µ—Å—Ç—å.
        –í –∫–æ–Ω—Ü–µ –±–ª–æ–∫ "üí° <b>Insight</b>:" ‚Äî 2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è.
        JSON: ```{json.dumps(arts, ensure_ascii=False)}```
    """).strip()


def build_digest(prompt: str) -> str:
    resp = client.chat.completions.create(
        model=MODEL,
        messages=[{"role": "user", "content": prompt}],
        temperature=0.4,
        max_tokens=1000,
    )
    return resp.choices[0].message.content.strip()

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ TELEGRAM ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

def _sanitize(html_txt: str) -> str:
    html_txt = re.sub(r'href="([^"]+)"', lambda m: f'href="{m.group(1).replace("&", "&amp;")}"', html_txt)
    parts = re.split(r'(<[^>]+>)', html_txt)
    return ''.join(p if p.startswith('<') else _html.escape(p) for p in parts)


def send_telegram(html: str):
    api = f"https://api.telegram.org/bot{TG_TOKEN}/sendMessage"
    for i in range(0, len(html), 3800):
        chunk = _sanitize(html[i:i+3800])
        r = requests.post(api, json={
            "chat_id": CHAT_ID,
            "text": chunk,
            "parse_mode": "HTML",
            "disable_web_page_preview": False,
        }, timeout=20)
        print("TG", r.status_code, r.text[:80])
        r.raise_for_status()

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ MAIN ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

def main():
    arts = select_articles(rss_fetch())
    digest = build_digest(build_prompt(arts))
    send_telegram(digest)
    print(f"Digest sent with {len(arts)} articles ‚úîÔ∏é")

if __name__ == "__main__":
    main()
